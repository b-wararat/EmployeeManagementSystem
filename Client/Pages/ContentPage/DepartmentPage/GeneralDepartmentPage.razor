@using BaseLibrary.Entities
@using Client.ApplicationState
@implements IDisposable 

@if (allState.ShowGneralDepartment)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">General Department</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add Department</button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (generalDepartments?.Any() == true)
                                    {
                                        int count = 1;
                                        foreach (var item in generalDepartments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteCliked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No General Department added yet!
                                                </div>
                                            </td>
                                        </tr>    
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<GeneralDepartmentDialog @ref="generalDepartmentDialog" handleSaveOperationEvent="HandleSaveOperationEvent" generalDepartment="generalDepartment" />
<style>
    .curserStyle{
        cursor: pointer;
    }
</style>
@code{
    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment generalDepartment = new();
    public string Title = "Add";
    public List<GeneralDepartment> generalDepartments { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetGeneralDepartment();
        allState.Action += StateHasChanged;
    }

    void OpenDialog()
    {
        if (generalDepartmentDialog is not null)
        {
            generalDepartmentDialog.OpenDialog();
        }
        else
        {
            Console.WriteLine("generalDepartmentDialog is null!");
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private async Task GetGeneralDepartment()
    {
        generalDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentUrl);
    }
    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;

        if (generalDepartment.Id == 0)
        {
            var result = await generalDepartmentService.Insert(generalDepartment, Constants.GeneralDepartmentUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await generalDepartmentService.Update(generalDepartment, Constants.GeneralDepartmentUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            generalDepartment = new();
            await GetGeneralDepartment();
            generalDepartmentDialog?.ChangeTitle("Add");
        }
    }

    private async void EditClicked(GeneralDepartment department)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        generalDepartment = department;
        OpenDialog();
        await GetGeneralDepartment();
    }
    private async void DeleteCliked(GeneralDepartment generalDepartment)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure wanna delete {generalDepartment.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await generalDepartmentService.DeleteById(generalDepartment.Id, Constants.GeneralDepartmentUrl);
        if (response.Flag)
        {
            generalDepartments.Remove(generalDepartment);
        }
        await DisplayMessage(response.Flag, response.Message);
        await InvokeAsync(StateHasChanged);
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (!flag)
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }    
        await dialogService.AlertAsync(message, "Success Operation");
        return true;
    }
    private async void AddButtonClicked()
    {
        generalDepartmentDialog?.ChangeTitle("Add");
        generalDepartment = new();
        OpenDialog();
        await GetGeneralDepartment();
    }
}
