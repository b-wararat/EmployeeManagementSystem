@using System.Security.Claims
@implements IDisposable

@if (allState.ShowUser)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (manageUsers?.Any() == true)
                                    {
                                        int count = 1;
                                        @foreach (var item in manageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.UserId</td>
                                                <td>@item.Name</td>
                                                <td>@item.Email</td>
                                                <td>@item.Role</td>
                                                <td>
                                                    @if (role == Roles.Admin)
                                                    {
                                                        <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                        <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteCliked(item)"></i>
                                                    }
                                                    else
                                                    {
                                                        <text>-</text>
                                                    }
                                                </td>
                                            </tr>
                                            count++;
                                        }


                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    No User added yet!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<UserDialog @ref="userDialog"
            handleSaveOperationEvent="HandleSaveOperationEvent"
            manageUser="manageuser"
            systemRoles="systemRoles" />
<style>
    .curserStyle {
        cursor: pointer;
    }
</style>
@code {
    UserDialog? userDialog;
    ManageUser manageuser = new();
    string? role;
    public List<ManageUser> manageUsers { get; set; } = new();
    public List<SystemRole> systemRoles { get; set; } = new();
    public async Task GetRoleAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        var user = await customAuthStateProvider.GetMyUser();
        role = user!.Role;

    }

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        await GetRoleAsync();
        allState.Action += StateHasChanged;
    }
    void OpenDialog()
    {
        if (userDialog is not null)
        {
            userDialog.OpenDialog();
        }
        else
        {
            Console.WriteLine("userDialog is null!");
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    private async Task HandleSaveOperationEvent(ManageUser item)
    {
        bool successCheck = false;

        var result = await accountService.UpdateUser(item);
        successCheck = await DisplayMessage(result.Flag, result.Message);

        if (successCheck)
        {
            manageuser = new();
            await GetUsers();
        }
    }

    private async Task GetUsers()
    {
        manageUsers = await accountService.GetUsersAsync();
    }
    private async Task GetRoles()
    {
        systemRoles = await accountService.GetRoles();
    }

    private async void AddButtonClicked()
    {
        await GetRoles();
        await InvokeAsync(StateHasChanged);
        manageuser = new();
        OpenDialog();
        await GetUsers();
    }
    private async void EditClicked(ManageUser item)
    {
        manageuser = item;
        OpenDialog();
        await GetUsers();
        await InvokeAsync(StateHasChanged);
    }
    private async void DeleteCliked(ManageUser item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure wanna delete {item.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await accountService.DeleteUser(item.UserId);
        await DisplayMessage(response.Flag, response.Message);
        if (response.Flag) await GetUsers();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (!flag)
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
        await dialogService.AlertAsync(message, "Success Operation");
        return true;
    }
}